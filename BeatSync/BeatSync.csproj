<?xml version="1.0" encoding="utf-8"?>
<Project ToolsVersion="15.0" DefaultTargets="Build" xmlns="http://schemas.microsoft.com/developer/msbuild/2003">
  <PropertyGroup>
    <Configuration Condition=" '$(Configuration)' == '' ">Debug</Configuration>
    <Platform Condition=" '$(Platform)' == '' ">AnyCPU</Platform>
    <ProductVersion>8.0.30703</ProductVersion>
    <SchemaVersion>2.0</SchemaVersion>
    <ProjectGuid>{E9536F87-B2DE-423A-95A5-C1E35B1B0DD5}</ProjectGuid>
    <OutputType>Library</OutputType>
    <AppDesignerFolder>Properties</AppDesignerFolder>
    <RootNamespace>BeatSync</RootNamespace>
    <AssemblyName>BeatSync</AssemblyName>
    <TargetFrameworkVersion>v4.7.2</TargetFrameworkVersion>
    <FileAlignment>512</FileAlignment>
    <PathMap>$(SolutionDir)=C:\</PathMap>
    <DebugType>portable</DebugType>
    <TargetFrameworkProfile />
  </PropertyGroup>
  <PropertyGroup Condition=" '$(Configuration)|$(Platform)' == 'Debug|AnyCPU' ">
    <DebugSymbols>true</DebugSymbols>
    <Optimize>false</Optimize>
    <OutputPath>bin\Debug\</OutputPath>
    <DefineConstants>DEBUG;TRACE</DefineConstants>
    <ErrorReport>prompt</ErrorReport>
    <WarningLevel>4</WarningLevel>
    <Prefer32Bit>false</Prefer32Bit>
    <DebugType>full</DebugType>
  </PropertyGroup>
  <PropertyGroup Condition=" '$(Configuration)|$(Platform)' == 'Release|AnyCPU' ">
    <DebugType>pdbonly</DebugType>
    <Optimize>true</Optimize>
    <OutputPath>bin\Release\</OutputPath>
    <DefineConstants>TRACE</DefineConstants>
    <ErrorReport>prompt</ErrorReport>
    <WarningLevel>4</WarningLevel>
    <Prefer32Bit>false</Prefer32Bit>
  </PropertyGroup>
  <PropertyGroup Condition="'$(Configuration)|$(Platform)' == 'Debug|x64'">
    <DebugSymbols>true</DebugSymbols>
    <OutputPath>bin\x64\Debug\</OutputPath>
    <DefineConstants>DEBUG;TRACE</DefineConstants>
    <DebugType>portable</DebugType>
    <PlatformTarget>x64</PlatformTarget>
    <ErrorReport>prompt</ErrorReport>
    <CodeAnalysisRuleSet>MinimumRecommendedRules.ruleset</CodeAnalysisRuleSet>
  </PropertyGroup>
  <PropertyGroup Condition="'$(Configuration)|$(Platform)' == 'Release|x64'">
    <OutputPath>bin\x64\Release\</OutputPath>
    <DefineConstants>TRACE</DefineConstants>
    <Optimize>true</Optimize>
    <DebugType>pdbonly</DebugType>
    <PlatformTarget>x64</PlatformTarget>
    <ErrorReport>prompt</ErrorReport>
    <CodeAnalysisRuleSet>MinimumRecommendedRules.ruleset</CodeAnalysisRuleSet>
  </PropertyGroup>
  <ItemGroup>
    <Reference Include="BeatSaberCustomUI, Version=1.5.11.0, Culture=neutral, processorArchitecture=MSIL">
      <SpecificVersion>False</SpecificVersion>
      <HintPath>References\Plugins\BeatSaberCustomUI.dll</HintPath>
      <Private>False</Private>
    </Reference>
    <Reference Include="BeatSaverDownloader, Version=4.3.1.0, Culture=neutral, processorArchitecture=MSIL">
      <SpecificVersion>False</SpecificVersion>
      <HintPath>References\Plugins\BeatSaverDownloader.dll</HintPath>
      <Private>False</Private>
    </Reference>
    <Reference Include="Microsoft.Build.Framework" />
    <Reference Include="SemVer.1.2.0.0, Version=1.2.0.0, Culture=neutral, PublicKeyToken=a89bb7dc6f7a145c, processorArchitecture=MSIL">
      <SpecificVersion>False</SpecificVersion>
      <HintPath>References\Libs\SemVer.1.2.0.0.dll</HintPath>
      <Private>False</Private>
    </Reference>
    <Reference Include="SongCore, Version=2.0.11.0, Culture=neutral, processorArchitecture=MSIL">
      <SpecificVersion>False</SpecificVersion>
      <HintPath>References\Plugins\SongCore.dll</HintPath>
      <Private>False</Private>
    </Reference>
    <Reference Include="System">
      <Private>False</Private>
    </Reference>
    <Reference Include="System.Core">
      <Private>False</Private>
    </Reference>
    <Reference Include="System.IO.Compression">
      <Private>False</Private>
    </Reference>
    <Reference Include="System.IO.Compression.FileSystem">
      <Private>False</Private>
    </Reference>
    <Reference Include="System.Web, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a, processorArchitecture=MSIL">
      <SpecificVersion>False</SpecificVersion>
      <HintPath>References\Managed\System.Web.dll</HintPath>
      <Private>False</Private>
    </Reference>
    <Reference Include="System.Xml.Linq">
      <Private>False</Private>
    </Reference>
    <Reference Include="Microsoft.CSharp">
      <Private>False</Private>
    </Reference>
    <Reference Include="System.Data">
      <Private>False</Private>
    </Reference>
    <Reference Include="System.Xml">
      <Private>False</Private>
    </Reference>
    <Reference Include="Assembly-CSharp">
      <HintPath>References\Managed\Assembly-CSharp.dll</HintPath>
      <Private>False</Private>
    </Reference>
    <Reference Include="IPA.Loader">
      <HintPath>References\Managed\IPA.Loader.dll</HintPath>
      <Private>False</Private>
    </Reference>
    <Reference Include="Unity.TextMeshPro">
      <HintPath>References\Managed\Unity.TextMeshPro.dll</HintPath>
      <Private>False</Private>
    </Reference>
    <Reference Include="UnityEngine">
      <HintPath>References\Managed\UnityEngine.dll</HintPath>
      <Private>False</Private>
    </Reference>
    <Reference Include="UnityEngine.CoreModule">
      <HintPath>References\Managed\UnityEngine.CoreModule.dll</HintPath>
      <Private>False</Private>
    </Reference>
    <Reference Include="UnityEngine.ImageConversionModule, Version=0.0.0.0, Culture=neutral, processorArchitecture=MSIL">
      <SpecificVersion>False</SpecificVersion>
      <HintPath>References\Managed\UnityEngine.ImageConversionModule.dll</HintPath>
    </Reference>
    <Reference Include="UnityEngine.UI">
      <HintPath>References\Managed\UnityEngine.UI.dll</HintPath>
      <Private>False</Private>
    </Reference>
    <Reference Include="UnityEngine.UIElementsModule">
      <HintPath>References\Managed\UnityEngine.UIElementsModule.dll</HintPath>
      <Private>False</Private>
    </Reference>
    <Reference Include="UnityEngine.UIModule">
      <HintPath>References\Managed\UnityEngine.UIModule.dll</HintPath>
      <Private>False</Private>
    </Reference>
  </ItemGroup>
  <ItemGroup>
    <Compile Include="BeatSync.cs" />
    <Compile Include="Configs\BeastSaberFeedConfigs.cs" />
    <Compile Include="Configs\BeatSaverFeedConfigs.cs" />
    <Compile Include="Configs\PlaylistStyleConverter.cs" />
    <Compile Include="Configs\StatusUiConfig.cs" />
    <Compile Include="Configs\SyncIntervalConfig.cs" />
    <Compile Include="Downloader\DownloadJob.cs" />
    <Compile Include="Downloader\DownloadManager.cs" />
    <Compile Include="Downloader\IDownloadJob.cs" />
    <Compile Include="Downloader\JobEventContainer.cs" />
    <Compile Include="Downloader\JobResult.cs" />
    <Compile Include="Downloader\DownloadStats.cs" />
    <Compile Include="HistoryManager.cs" />
    <Compile Include="Configs\ConfigBases.cs" />
    <Compile Include="Configs\FavoriteMappers.cs" />
    <Compile Include="Configs\ScoreSaberFeedConfigs.cs" />
    <Compile Include="Configs\SourceConfigs.cs" />
    <Compile Include="Logging\BeatSyncConsoleLogger.cs" />
    <Compile Include="Logging\BeatSyncIPALogger.cs" />
    <Compile Include="Logging\IBeatSyncLogger.cs" />
    <Compile Include="Downloader\SongDownloader.cs" />
    <Compile Include="SongHasher.cs" />
    <Compile Include="UI\IStatusManager.cs" />
    <Compile Include="UI\PostText.cs" />
    <Compile Include="UI\TextMeshList.cs" />
    <Compile Include="UI\UIController.cs" />
    <Compile Include="Utilities\DictionaryExtensions.cs" />
    <Compile Include="Utilities\FileIO.cs" />
    <Compile Include="Logging\BeatSyncFeedReaderLogger.cs" />
    <Compile Include="Playlists\Playlist.cs" />
    <Compile Include="Playlists\PlaylistManager.cs" />
    <Compile Include="Playlists\PlaylistSong.cs" />
    <Compile Include="Plugin.cs" />
    <Compile Include="Logging\Logger.cs" />
    <Compile Include="Configs\PluginConfig.cs" />
    <Compile Include="Properties\AssemblyInfo.cs" />
    <Compile Include="UI\BeatSync_UI.cs" />
    <Compile Include="UI\FloatingText.cs" />
    <Compile Include="Utilities\FileLock.cs" />
    <Compile Include="Utilities\PlaylistSongExtensions.cs" />
    <Compile Include="Utilities\TaskExtensions.cs" />
    <Compile Include="Utilities\Util.cs" />
  </ItemGroup>
  <ItemGroup>
    <EmbeddedResource Include="manifest.json" />
  </ItemGroup>
  <ItemGroup>
    <None Include="CreateJunctions.bat" />
    <None Include=".gitignore" />
    <None Include="ILRepack.targets" />
  </ItemGroup>
  <ItemGroup>
    <PackageReference Include="ILRepack.Lib.MSBuild.Task">
      <Version>2.0.18</Version>
    </PackageReference>
    <PackageReference Include="Newtonsoft.Json">
      <Version>12.0.2</Version>
    </PackageReference>
  </ItemGroup>
  <ItemGroup>
    <ProjectReference Include="..\Libs\BeatSaberDataProvider\SongFeedReaders\SongFeedReaders.csproj">
      <Project>{460a61bc-c89a-433d-a9e2-37447694d76c}</Project>
      <Name>SongFeedReaders</Name>
    </ProjectReference>
    <ProjectReference Include="..\Libs\BeatSaberDataProvider\WebUtilities\WebUtilities.csproj">
      <Project>{34e8f435-5c5a-4971-8d6c-173e027e17ca}</Project>
      <Name>WebUtilities</Name>
    </ProjectReference>
  </ItemGroup>
  <ItemGroup>
    <Content Include="Icons\BeatSyncLogoBanner.png" />
    <Content Include="Icons\BeatSyncLogo.png" />
    <Content Include="Icons\Playlists\BeastSaber\baseline_bookmarks_black_18dp.png" />
    <Content Include="Icons\Playlists\BeatSaver\baseline_bookmarks_black_18dp.png" />
    <Content Include="Icons\Playlists\BeatSaver\baseline_cloud_download_black_18dp.png" />
    <Content Include="Icons\Playlists\BeatSaver\baseline_event_available_black_18dp.png" />
    <Content Include="Icons\Playlists\BeatSaver\baseline_play_circle_outline_black_18dp.png" />
    <Content Include="Icons\Playlists\BeatSaver\baseline_visibility_black_18dp.png" />
    <Content Include="Icons\Playlists\BeatSaver\baseline_whatshot_black_18dp.png" />
    <Content Include="Icons\Playlists\BeatSync\baseline_event_available_black_18dp.png" />
    <Content Include="Icons\Playlists\ScoreSaber\baseline_event_available_black_18dp.png" />
    <Content Include="Icons\Playlists\ScoreSaber\baseline_play_circle_outline_black_18dp.png" />
    <Content Include="Icons\Playlists\ScoreSaber\baseline_stars_black_18dp.png" />
    <Content Include="Icons\Playlists\ScoreSaber\baseline_trending_up_black_18dp.png" />
    <EmbeddedResource Include="Icons\Playlists\ScoreSaber\ScoreSaberLatestRanked.png" />
    <EmbeddedResource Include="Icons\Playlists\ScoreSaber\ScoreSaberTopPlayed.png" />
    <EmbeddedResource Include="Icons\Playlists\ScoreSaber\ScoreSaberTrending.png" />
    <EmbeddedResource Include="Icons\Playlists\ScoreSaber\ScoreSaberTopRanked.png" />
    <EmbeddedResource Include="Icons\Playlists\BeatSync\BeatSyncRecent.png" />
    <EmbeddedResource Include="Icons\Playlists\BeatSync\BeatSyncAll.png" />
    <EmbeddedResource Include="Icons\Playlists\BeatSaver\BeatSaverMapper.png" />
    <EmbeddedResource Include="Icons\Playlists\BeatSaver\BeatSaverDownloads.png" />
    <EmbeddedResource Include="Icons\Playlists\BeatSaver\BeatSaverPlays.png" />
    <EmbeddedResource Include="Icons\Playlists\BeatSaver\BeatSaverHot.png" />
    <EmbeddedResource Include="Icons\Playlists\BeatSaver\BeatSaverLatest.png" />
    <EmbeddedResource Include="Icons\Playlists\BeatSaver\BeatSaverFavoriteMappers.png" />
    <EmbeddedResource Include="Icons\Playlists\BeastSaber\BSaberCurator.png" />
    <EmbeddedResource Include="Icons\Playlists\BeastSaber\BSaberFollows.png" />
    <Content Include="Icons\Playlists\BeastSaber\baseline_stars_black_18dp.png" />
    <Content Include="Icons\Playlists\BeastSaber\baseline_visibility_black_18dp.png" />
    <EmbeddedResource Include="Icons\Playlists\BeastSaber\BSaberBookmarks.png" />
    <Content Include="Icons\Playlists\BeastSaber\BeatSyncBSaber.png" />
    <None Include="Icons\Playlists\ScoreSaber\BeatSyncScoreSaber.png" />
    <None Include="Icons\Playlists\BeatSaver\BeatSyncBeatSaver.png" />
  </ItemGroup>
  <ItemGroup>
    <EmbeddedResource Include="Icons\BeatSyncLogoSmall.png" />
  </ItemGroup>
  <Import Project="$(MSBuildToolsPath)\Microsoft.CSharp.targets" />
  <Target Name="CopyToPlugins" AfterTargets="ILRepacker" Condition="'$(NCrunch)' != '1'">
    <Message Text="Copying $(OutputPath)$(AssemblyName).dll to Plugins folder" Importance="high" />
    <Copy SourceFiles="$(OutputPath)\Merged\$(AssemblyName).dll" DestinationFiles="$(ProjectDir)\References\Plugins\$(AssemblyName).dll" />
  </Target>
  <Target Name="CopyPDBToPlugins" AfterTargets="CopyToPlugins" Condition="'$(NCrunch)' != '1'">
    <Message Text="Copying $(OutputPath)\Merged\$(AssemblyName).pdb to Plugins folder" Importance="high" />
    <Copy SourceFiles="$(OutputPath)\Merged\$(AssemblyName).pdb" DestinationFiles="$(ProjectDir)\References\Plugins\$(AssemblyName).pdb" />
  </Target>
  <Target Name="ZipRelease" AfterTargets="ILRepacker" Condition="'$(NCrunch' != '1' AND '$(Configuration)' == 'Release'">
    <Message Text="Zipping plugin for release. $(AssemblyVersion)" Importance="high" />
    <GetCommitHash SolutionDir="$(ProjectDir)..">
      <Output TaskParameter="CommitShortHash" PropertyName="CommitShortHash" />
    </GetCommitHash>
    <Copy SourceFiles="$(OutputPath)\Merged\$(AssemblyName).dll" DestinationFiles="$(IntermediateOutputPath)\zip\Plugins\$(AssemblyName).dll" />
    <BuildManifestInfo>
      <Output TaskParameter="PluginVersion" PropertyName="PluginVersion" />
      <Output TaskParameter="GameVersion" PropertyName="GameVersion" />
      <Output TaskParameter="AssemblyVersion" PropertyName="AssemblyVersion" />
    </BuildManifestInfo>
    <Message Text="PluginVersion: $(PluginVersion), AssemblyVersion: $(AssemblyVersion), GameVersion: $(GameVersion)" Importance="high" />
    <ZipDir ZipFileName="$(OutDir)\zip\BeatSync-$(PluginVersion)-bs$(GameVersion)-$(CommitShortHash).zip" DirectoryName="$(IntermediateOutputPath)\zip" />
  </Target>
  <UsingTask TaskName="BuildManifestInfo" TaskFactory="CodeTaskFactory" AssemblyFile="$(MSBuildToolsPath)\Microsoft.Build.Tasks.v12.0.dll">
    <ParameterGroup>
      <GameVersion ParameterType="System.String" Output="true" />
      <PluginVersion ParameterType="System.String" Output="true" />
      <AssemblyVersion ParameterType="System.String" Output="true" />
    </ParameterGroup>
    <Task>
      <Reference Include="$(USERPROFILE)\.nuget\packages\newtonsoft.json\12.0.2\lib\netstandard1.3\Newtonsoft.Json.dll" />
      <Using Namespace="System.IO" />
      <Using Namespace="Newtonsoft.Json" />
      <Using Namespace="Newtonsoft.Json.Linq" />
      <Using Namespace="System.Text.RegularExpressions" />
      <Code Type="Fragment" Language="cs"><![CDATA[
            try
            {
                string manifestFile = "manifest.json";
                string assemblyFile = "Properties\\AssemblyInfo.cs";
                string startString = "[assembly: AssemblyVersion(\"";
                string secondStartString = "[assembly: AssemblyFileVersion(\"";
                string assemblyFileVersion = null;
                string firstLineStr = null;
                string endLineStr = null;
                bool badParse = false;
                int startLine = 1;
                int endLine = 0;
                int startColumn = 0;
                int endColumn = 0;
                if (!File.Exists(manifestFile))
                {
                    throw new FileNotFoundException("Could not find manifest: " + Path.GetFullPath(manifestFile));
                }
                if (!File.Exists(assemblyFile))
                {
                    throw new FileNotFoundException("Could not find AssemblyInfo: " + Path.GetFullPath(assemblyFile));
                }
                JToken manifestJson = JsonConvert.DeserializeObject<JToken>(File.ReadAllText(manifestFile));
                if (manifestJson["version"] != null)
                {
                    string version = manifestJson["version"].Value<string>();
                    PluginVersion = string.IsNullOrEmpty(version) ? "E.R.R" : version;
                }
                if (manifestJson["gameVersion"] != null)
                {
                    string gameVersion = manifestJson["gameVersion"].Value<string>();
                    GameVersion = string.IsNullOrEmpty(gameVersion) ? "E.R.R" : gameVersion;
                }

                string line;
                using (StreamReader assemblyStream = new StreamReader(assemblyFile))
                {
                    while ((line = assemblyStream.ReadLine()) != null)
                    {
                        if (line.Trim().StartsWith(startString))
                        {
                            firstLineStr = line;
                            break;
                        }
                        startLine++;
                        endLine = startLine + 1;
                    }
                    while ((line = assemblyStream.ReadLine()) != null)
                    {
                        if (line.Trim().StartsWith(secondStartString))
                        {
                            endLineStr = line;
                            break;
                        }
                        endLine++;
                    }
                }
                if (!string.IsNullOrEmpty(firstLineStr))
                {
                    startColumn = firstLineStr.IndexOf('"') + 1;
                    endColumn = firstLineStr.LastIndexOf('"');
                    if (startColumn > 0 && endColumn > 0)
                        AssemblyVersion = firstLineStr.Substring(startColumn, endColumn - startColumn);
                    else
                        badParse = true;
                }
                else
                    badParse = true;
                if (badParse)
                {
                    Log.LogError("Build", "BSMOD03", "", assemblyFile, 0, 0, 0, 0, "Unable to parse the AssemblyVersion from {0}", assemblyFile);
                    badParse = false;
                }

                if (AssemblyVersion != PluginVersion)
                {
                    Log.LogError("Build", "BSMOD01", "", assemblyFile, startLine, startColumn + 1, startLine, endColumn + 1, "PluginVersion {0} in manifest.json does not match AssemblyVersion {1} in AssemblyInfo.cs", PluginVersion, AssemblyVersion, assemblyFile);
                    Log.LogMessage(MessageImportance.High, "PluginVersion {0} does not match AssemblyVersion {1}", PluginVersion, AssemblyVersion);
                }
                if (!string.IsNullOrEmpty(endLineStr))
                {
                    startColumn = endLineStr.IndexOf('"') + 1;
                    endColumn = endLineStr.LastIndexOf('"');
                    if (startColumn > 0 && endColumn > 0)
                    {
                        assemblyFileVersion = endLineStr.Substring(startColumn, endColumn - startColumn);
                        if (AssemblyVersion != assemblyFileVersion)
                            Log.LogWarning("Build", "BSMOD02", "", assemblyFile, endLine, startColumn + 1, endLine, endColumn + 1, "AssemblyVersion {0} does not match AssemblyFileVersion {1} in AssemblyInfo.cs", AssemblyVersion, assemblyFileVersion);

                    }
                    else
                    {
                        Log.LogError("Build", "BSMOD03", "", assemblyFile, 0, 0, 0, 0, "Unable to parse the AssemblyFileVersion from {0}", assemblyFile);
                    }
                }
                return true;
            }
            catch (Exception ex)
            {
                throw;
                Log.LogErrorFromException(ex);
                return false;
            }
      ]]></Code>
    </Task>
  </UsingTask>
  <!-- Source: https://stackoverflow.com/a/38127938 -->
  <UsingTask TaskName="ZipDir" TaskFactory="CodeTaskFactory" AssemblyFile="$(MSBuildToolsPath)\Microsoft.Build.Tasks.v12.0.dll">
    <ParameterGroup>
      <ZipFileName ParameterType="System.String" Required="true" />
      <DirectoryName ParameterType="System.String" Required="true" />
    </ParameterGroup>
    <Task>
      <Reference Include="System.IO.Compression.FileSystem" />
      <Reference Include="System.IO" />
      <Using Namespace="System.IO.Compression" />
      <Using Namespace="System.IO" />
      <Using Namespace="System.Threading" />
      <Code Type="Fragment" Language="cs"><![CDATA[
        try
        {
          var zipDir = new DirectoryInfo(Path.GetDirectoryName(Path.GetFullPath(ZipFileName)));
          if (zipDir.Exists)
            zipDir.Delete(true);
          zipDir.Create();
          zipDir.Refresh();
          int tries = 0;
          while(!zipDir.Exists || tries < 10) // Prevents breaking when Explorer is in the folder.
          {
            tries++;
            Thread.Sleep(50);
            zipDir.Create();
            zipDir.Refresh();
          }
		  
          if(File.Exists(ZipFileName))
            File.Delete(ZipFileName);
          Log.LogMessage(string.Format("Zipping Directory {0} to {1}", DirectoryName, ZipFileName));
          ZipFile.CreateFromDirectory( DirectoryName, ZipFileName );
          return true;
        }
        catch(Exception ex)
        {
          Log.LogErrorFromException(ex);
          return false;
        }
      ]]></Code>
    </Task>
  </UsingTask>
  <UsingTask TaskName="GetCommitHash" TaskFactory="CodeTaskFactory" AssemblyFile="$(MSBuildToolsPath)\Microsoft.Build.Tasks.v12.0.dll">
    <ParameterGroup>
      <SolutionDir ParameterType="System.String" Required="true" />
      <CommitShortHash ParameterType="System.String" Output="true" />
    </ParameterGroup>
    <Task>
      <Using Namespace="System.Diagnostics" />
      <Code Type="Fragment" Language="cs">
        <![CDATA[
            CommitShortHash = "local";
            try
            {
				SolutionDir = Path.GetFullPath(SolutionDir);
                Log.LogMessage(MessageImportance.High, "Solution Directory {0}", SolutionDir);
                Process process = new Process();
                string arg = "rev-parse HEAD";
                process.StartInfo = new ProcessStartInfo("git", arg);
                process.StartInfo.UseShellExecute = false;
                process.StartInfo.WorkingDirectory = SolutionDir;
                process.StartInfo.RedirectStandardOutput = true;
                process.Start();
                var thing = process.StandardOutput.ReadToEnd();
                CommitShortHash = thing.Substring(0, 7);
				Log.LogMessage(MessageImportance.High, "ShortCommitHash: {0}", CommitShortHash);
                return true;
            }
            catch (Exception ex)
            {
                Log.LogErrorFromException(ex);
                return false;
            }
      ]]>
      </Code>
    </Task>
  </UsingTask>
  <PropertyGroup>
    <PostBuildEvent>
    </PostBuildEvent>
  </PropertyGroup>
</Project>